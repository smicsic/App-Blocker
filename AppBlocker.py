import psutil
import tkinter as tk
import threading
import time
import pyfiglet
import os
import sys
import json
import subprocess

from tkinter import simpledialog, messagebox

text = "Hello User !"
font = "slant"
banner = pyfiglet.figlet_format(text, font = font)

smics = pyfiglet.figlet_format("by smics_play", font = "slant")

PROCESS_NAME = ""
ADMIN_PASSWORD = ""
monitor_thread = None
monitoring_active = False

def close_app():
    global PROCESS_NAME
    if not PROCESS_NAME:
        return

    for proc in psutil.process_iter():
        try:
            if PROCESS_NAME in proc.name().lower():
                process_name_full = proc.name()
                proc.terminate()
                log(f"üî¥ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{process_name_full}' (PID: {proc.pid}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass

def base_dir():
    if getattr(sys, 'frozen', False):
        return os.path.dirname(os.path.abspath(sys.executable))
    return os.path.dirname(os.path.abspath(__file__))

APP_DIR = os.path.dirname(os.path.abspath(sys.executable if getattr(sys, 'frozen', False) else __file__))
CONFIG_PATH = os.path.join(APP_DIR, "config.json")
SECURE_EXE  = os.path.join(APP_DIR, "SecureSystem.exe")

# –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –º–∏–≥–∞–ª–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
CREATE_NO_WINDOW = getattr(subprocess, "CREATE_NO_WINDOW", 0x08000000 if os.name == "nt" else 0)

# -------------- –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–ê ----------------

def save_config(status="RUNNING"):
    config = {
        "process_name": PROCESS_NAME,
        "admin_password": ADMIN_PASSWORD,
        "status": status
    }
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(config, f)

def load_config():
    global PROCESS_NAME, ADMIN_PASSWORD
    if os.path.exists(CONFIG_PATH):
        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            config = json.load(f)
        PROCESS_NAME = config.get("process_name", "")
        ADMIN_PASSWORD = config.get("admin_password", "")
        return config.get("status", "RUNNING")
    return "RUNNING"

def get_user_processes():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    system_names = {
        "system", "idle", "svchost.exe", "smss.exe", "wininit.exe",
        "csrss.exe", "winlogon.exe", "services.exe", "lsass.exe",
        "dllhost.exe", "runtimebroker.exe", "searchindexer.exe",
        "explorer.exe", "crossdeviceresume.exe", "fmaudiomonitor.exe",
        "fmservice64.exe", "fnhotkeycapslknumlk.exe", "fnhotkeyutility.exe",
        "intelaudioservice.exe", "lenovoutilityservice.exe",
        "lenovovantage-(genericmessagingaddin).exe",
        "lenovovantage-(lenovogamingsystemaddin).exe",
        "lenovovantage-(vantagecoreaddin).exe", "lenovovantageservice.exe",
        "locator.exe", "lockapp.exe", "lsaiso.exe", "mpdefendercoreservice.exe",
        "msmpeng.exe", "nvdisplay.container.exe", "nahimicservice.exe",
        "ngciso.exe", "nhnotifsys.exe", "nissrv.exe", "openconsole.exe",
        "registry", "rtkauduservice64.exe", "rtkbtmanserv.exe", "searchhost.exe",
        "securityhealthservice.exe", "securityhealthsystray.exe",
        "shellhost.exe", "startmenuexperiencehost.exe",
        "system idle process", "textinputhost.exe",
        "wmiregistrationservice.exe", "wudfhost.exe", "wmiapsrv.exe",
        "wmiprvse.exe", "backgroundtaskhost.exe",
        "conhost.exe", "ctfmon.exe", "dwm.exe", "fontdrvhost.exe",
        "fsnotifier.exe", "full-line-inference.exe", "ipf_helper.exe",
        "ipf_uf.exe", "ipfsvc.exe", "jhi_service.exe", "msedgewebview2.exe",
        "powershell.exe", "pycharm64.exe", "python.exe", "sihost.exe",
        "spoolsv.exe", "taskhostw.exe", "unsecapp.exe", "MoUsoCoreWorker.exe", "ApplicationFrameHost.exe",
        "LenovoVantage-(GenericTelemetryAddin).exe",
        "audiodg.exe", "smartscreen.exe", "appblocker.exe", "securesystem.exe"
    }
    processes = []
    for proc in psutil.process_iter(['name']):
        try:
            name = proc.info['name']
            if name and name.lower() not in system_names and not name.lower().startswith("windows"):
                processes.append(name)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return sorted(set(processes))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
def is_app_running():
    global PROCESS_NAME
    if not PROCESS_NAME:
        return False

    for proc in psutil.process_iter():
        try:
            if PROCESS_NAME in proc.name().lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return False

def watch_secure_system():
    """–°–ª–µ–¥–∏–º –∑–∞ SecureSystem.exe –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º –µ–≥–æ –∏–∑ —Ç–æ–π –∂–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ —É–ø–∞–ª."""
    while True:
        found = False
        for proc in psutil.process_iter(['name', 'exe']):
            try:
                name = (proc.info.get('name') or '').lower()
                exe  = (proc.info.get('exe')  or '').lower()
                if 'securesystem' in name or (exe and exe.endswith('securesystem.exe')):
                    found = True
                    break
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue

        if not found and os.path.exists(SECURE_EXE):
            try:
                subprocess.Popen([SECURE_EXE], cwd=base_dir(), creationflags=CREATE_NO_WINDOW)
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SecureSystem: {e}")
        time.sleep(1)


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –æ–∫–Ω–µ
def log(message):
    text_log.insert(tk.END, f"{message}\n")
    text_log.see(tk.END)


# –ü–æ—Ç–æ–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
def monitor_process():
    global PROCESS_NAME, monitoring_active
    while monitoring_active:
        if not PROCESS_NAME:
            time.sleep(1)  # –ñ–¥–µ–º, –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω
            continue

        if is_app_running():
            log(f"üîç –ü—Ä–æ—Ü–µ—Å—Å '{PROCESS_NAME}' –∑–∞–ø—É—â–µ–Ω. –ü—ã—Ç–∞—é—Å—å –∑–∞–∫—Ä—ã—Ç—å...")
            close_app()
        else:
            log(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å '{PROCESS_NAME}' –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        time.sleep(2)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
def start_monitoring():
    global PROCESS_NAME, monitor_thread, monitoring_active

    # 1. –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –∏–∑ –ø–æ–ª—è
    input_name = entry_process.get().strip().lower()

    if not input_name:
        log("‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å.")
        return

    if monitoring_active and input_name == PROCESS_NAME:
        log(f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ '{PROCESS_NAME}' —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    if monitoring_active and input_name != PROCESS_NAME:
        log(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ '{input_name}'. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫ –Ω–µ –Ω—É–∂–Ω–æ, –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PROCESS_NAME

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    PROCESS_NAME = input_name
    save_config()  # ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–±—ã–≤–∞–ª—Å—è
    root.title(f"Blocker –¥–ª—è: {PROCESS_NAME}")

    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if not monitoring_active:
        monitoring_active = True
        monitor_thread = threading.Thread(target=monitor_process, daemon=True)
        monitor_thread.start()
        log(f"üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ '{PROCESS_NAME}' –∑–∞–ø—É—â–µ–Ω.")
    else:
        # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PROCESS_NAME
        log(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ '{PROCESS_NAME}'.")

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    entry_process.config(state=tk.DISABLED)
    button_start.config(state=tk.DISABLED)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
def on_close():
    log("‚ùó –ù–∞–∂–∞—Ç –∫—Ä–µ—Å—Ç–∏–∫, –Ω–æ –æ–∫–Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.")

def ensure_secure_system():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç SecureSystem –∏–∑ —Ç–æ–π –∂–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    for proc in psutil.process_iter(['name', 'exe']):
        try:
            name = (proc.info.get('name') or '').lower()
            exe  = (proc.info.get('exe')  or '').lower()
            if 'securesystem' in name or (exe and exe.endswith('securesystem.exe')):
                return False  # —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        except:
            pass

    if os.path.exists(SECURE_EXE):
        subprocess.Popen([SECURE_EXE], cwd=base_dir(), creationflags=CREATE_NO_WINDOW)
        return True
    return False


# ----------------- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å -----------------

root = tk.Tk()
root.title("App Blocker")
root.geometry("900x700")
root.resizable(False, False)

# 1. –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞
frame_input = tk.Frame(root)
frame_input.pack(padx=10, pady=(10, 5), fill='x')

# –õ–µ–π–±–ª
label_process = tk.Label(frame_input, text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, chrome.exe):")
label_process.pack(side=tk.LEFT)

# –ü–æ–ª–µ –≤–≤–æ–¥–∞
entry_process = tk.Entry(frame_input, width=20)
entry_process.pack(side=tk.LEFT, padx=5, expand=True, fill='x')
# entry_process.insert(0, "chrome.exe") # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å"
button_start = tk.Button(frame_input, text="–ù–∞—á–∞—Ç—å", command=start_monitoring)
button_start.pack(side=tk.LEFT)

# –¢–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥
text_log = tk.Text(root, wrap="word", height=15, bg="black", fg="lime", font=("Courier New", 10))
text_log.pack(padx=10, pady=5, fill='both', expand=True)

# –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
text_box = tk.Text(root, wrap="word", height=6, bg="black", fg="lime", font=("Courier New", 10))
text_box.pack(padx=10, pady=5, fill='both', expand=True)

def refresh_process_list():
    text_box.delete('1.0', tk.END)  # –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
    text_box.insert(tk.END, smics)
    text_box.insert(tk.END, "üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:\n\n")
    processes = get_user_processes()
    for name in processes:
        text_box.insert(tk.END, f" {name}\n")
    text_box.insert(tk.END, f"\n‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å: {len(processes)}")
    log("üîÑ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω.")

button_refresh = tk.Button(frame_input, text="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã", command=refresh_process_list)
button_refresh.pack(side=tk.LEFT, padx=5)

# ----------------- –ê–í–¢–û –ó–ê–ü–£–°–ö -----------------
load_config()  # üü¢ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ config.json

if not ADMIN_PASSWORD:
    # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –∑–Ω–∞—á–∏—Ç –∑–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π
    root.withdraw()
    ADMIN_PASSWORD = simpledialog.askstring(
        "–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—ã—Ö–æ–¥–∞:",
        show="*"
    )
    if not ADMIN_PASSWORD:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª—å –Ω–µ –∑–∞–¥–∞–Ω! –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞.")
        root.destroy()
        sys.exit(0)
    save_config()
root.deiconify()

def exit_app():
    password_input = simpledialog.askstring(
        "–í—ã—Ö–æ–¥",
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞:",
        show="*"
    )
    if password_input == ADMIN_PASSWORD:
        save_config(status="EXIT")  # üü° –≤–æ—Ç –æ–Ω–æ!
        time.sleep(2)
        try:
            save_config(status="EXIT")  # –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º EXIT
            log("üìù EXIT –∑–∞–ø–∏—Å–∞–Ω –≤ config.json")
        except Exception as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ EXIT: {e}")

        # üß® –£–±–∏–≤–∞–µ–º SecureSystem.exe
        for proc in psutil.process_iter(['name']):
            try:
                if proc.info['name'] and proc.info['name'].lower() == "securesystem.exe":
                    proc.terminate()
                    log("üõë SecureSystem –∑–∞–≤–µ—Ä—à—ë–Ω.")
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass

        time.sleep(1)
        root.destroy()
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –í—ã—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω.")


button_exit = tk.Button(frame_input, text="–í—ã–π—Ç–∏", command=exit_app, bg="red", fg="white")
button_exit.pack(side=tk.LEFT, padx=5)


# –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞
root.protocol("WM_DELETE_WINDOW", on_close)

# –ó–∞–ø—É—Å–∫ GUI
log(banner)
log("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å'.")
refresh_process_list()

# ----------------- –ê–í–¢–û –ó–ê–ü–£–°–ö -----------------
if ensure_secure_system():
    log("üõ° –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–Ω–∞")

if PROCESS_NAME:
    entry_process.insert(0, PROCESS_NAME)
    entry_process.config(state=tk.DISABLED)
    button_start.config(state=tk.DISABLED)
    monitoring_active = True
    threading.Thread(target=monitor_process, daemon=True).start()
    log(f"‚úÖ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è '{PROCESS_NAME}'")

threading.Thread(target=watch_secure_system, daemon=True).start()
# –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –ø–µ—Ä–µ–¥ root.mainloop():
root.mainloop()